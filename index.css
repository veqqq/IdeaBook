/* this only selects semantic tags to center things and adjust fonts - the values are hard to choose,


- em - The value of 1 em is relative to the font-size of the direct parent. Often used in media-queries, em is great for responsiveness, but it can get really confusing tracing back the exchange rate of ems to pixels for each element (1.25em of 1.4em of 16px = ?).
- rem - Relative to the font-size of the <html> element, rem makes it really easy to scale all headings and paragraphs on the page. Leaving the <html> with it's default fontsize and setting everything else with rem is a great approach accessibility-wise.
- px - Pixels give you the most precision but don't offer any scaling when used in responsive designs. They are reliable, easy to understand, and present a good visual connection between value and actual result (15px is close, maybe just a pixel or two more).


--

/* ### CSS methodlogies

#### OOCSS (Object Oriented CSS) 2009 has two main principles:
- Separate structure and skin. CSS defining the structure/layout shouldnâ€™t be mixed with the CSS defining
the skin (colors, fonts, etc.).So you can "reskin" the app.
- separate container and content. Elements as re-usable objects, an object should look the same regardless of
where it is on the page.

#### SMACSS (Scalable and Modular Architecture for CSS) 2011 - 
uses 5 categories base rules, layout rules, modules, state rules, theme rules. 
There are also naming conventions


#### BEM (Block, Element, Modifier)  2010 - divides user interface into independent 
blocks (reusable components like a search form). 
Elements are subparts which can't be reused (e.g. a button). 
Modifiers define the appearence, state or behavior of a block or element
- exotic but consistent naming system

Atomic CSS 2014- 
ignores objects on the page, uses reusable utility classes which look insane.
https://adamwathan.me/css-utility-classes-and-separation-of-concerns/
the html relies on the css now!

CSS in JS -  2014 - 
defines css styles in the components themselves. 
Used for React. (Reacts defines html in JS instead of an html file!)
It defies css best practices ~ because the web is no longer static.
CSS here is for setting hard bounderies between components - 
which are all encapsulated html/css/js of their own, without affecting each other.
Angular, Vue.js follow suit. */

---

/* https://alistapart.com/article/holygrail/ <- this article led to a lot of inovation in css,
it's also good to learn from, it's from 2006 
it uses the float based approach - but float doesn't make columns equal in height, nor fill the screen height

in 2015, flexbox gained steam. https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/
this uses   <div class="container">

css grid eventually gained prominence - doesn't require div!


https://medium.com/actualize-network/modern-css-explained-for-dinosaurs-5226febe3525 <- this article on sakura inspired this stuff

*/


html {
  font-size: 62.5%;
  font-family: serif;
}body {
  font-size: 1.8rem;
  line-height: 1.618;
  max-width: 38em;
  margin: auto;
  color: #4a4a4a;
  background-color: #f9f9f9;
  padding: 13px;
}@media (max-width: 684px) {
  body {
    font-size: 1.53rem;
  }
}@media (max-width: 382px) {
  body {
    font-size: 1.35rem;
  }
}h1, h2, h3, h4, h5, h6 {
  line-height: 1.1;
  font-family: Verdana, Geneva, sans-serif;
  font-weight: 700;
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-word-break: break-all;
  word-break: break-word;
  -ms-hyphens: auto;
  -moz-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;
}h1 {
  font-size: 2.35em;
}h2 {
  font-size: 2em;
}h3 {
  font-size: 1.75em;
}h4 {
  font-size: 1.5em;
}h5 {
  font-size: 1.25em;
}h6 {
  font-size: 1em;
}
